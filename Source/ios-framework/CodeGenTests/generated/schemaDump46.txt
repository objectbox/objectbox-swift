Schema {
	entities = [SchemaEntity {
		modelId = Optional(1)
		modelUid = Optional(16640)
		className = Author
		dbName = nil
		properties = [SchemaProperty {
			modelId = Optional(IdUid(1:14592))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Author>
			entityName = Author
			unwrappedPropertyType = EntityId<Author>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
, SchemaProperty {
			modelId = Optional(IdUid(2:15616))
			propertyName = name
			propertyType = string
			propertyFlags = []
			propertySwiftType = String
			entityName = Author
			unwrappedPropertyType = String
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = false
			isBuiltInType = false
			isStringType = true
			isRelation = false
		}
, SchemaProperty {
			modelId = nil
			propertyName = books
			propertyType = unknown
			propertyFlags = []
			propertySwiftType = ToMany<Book>
			entityName = Author
			unwrappedPropertyType = ToMany<Book>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = false
			isBuiltInType = false
			isStringType = false
			isRelation = false
		}
]
		indexes = []
		relations = []
		toManyRelations = [SchemaToManyRelation {
			modelId = nil
			relationName = books
			relationType = ToMany<Book>
			relationTargetType = Book
			dbName = nil
			relationOwnerType = Author
			backlinkProperty = Optional("author")
		backlinkPropertyId = IdUid(3:20736)
		}
]
		lastPropertyId = Optional(IdUid(2:15616))
		isEntitySubclass = true
		isValueType = false
		hasStringProperties = true
		idProperty = Optional(SchemaProperty {
			modelId = Optional(IdUid(1:14592))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Author>
			entityName = Author
			unwrappedPropertyType = EntityId<Author>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
)
		idCandidates = [SchemaProperty {
			modelId = Optional(IdUid(1:14592))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Author>
			entityName = Author
			unwrappedPropertyType = EntityId<Author>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
]
	}
, SchemaEntity {
		modelId = Optional(2)
		modelUid = Optional(21504)
		className = Book
		dbName = nil
		properties = [SchemaProperty {
			modelId = Optional(IdUid(1:17664))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Book>
			entityName = Book
			unwrappedPropertyType = EntityId<Book>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
, SchemaProperty {
			modelId = Optional(IdUid(2:18688))
			propertyName = name
			propertyType = string
			propertyFlags = []
			propertySwiftType = String
			entityName = Book
			unwrappedPropertyType = String
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = false
			isBuiltInType = false
			isStringType = true
			isRelation = false
		}
, SchemaProperty {
			modelId = Optional(IdUid(3:20736))
			propertyName = author
			propertyType = relation
			propertyFlags = [SourceryLib.PropertyFlags.indexed, SourceryLib.PropertyFlags.indexPartialSkipZero]
			propertySwiftType = ToOne<Author>
			entityName = Book
			unwrappedPropertyType = ToOne<Author>
			dbName = nil
			modelIndexId = Optional(IdUid(1:19712))
			backlinkName = nil
			backlinkType = nil
			isObjectId = false
			isBuiltInType = false
			isStringType = false
			isRelation = true
		}
]
		indexes = [SchemaIndex {
			modelId = IdUid(1:19712)
			properties = ["author"]
		}
]
		relations = [SchemaRelation {
			modelId = nil
			relationName = author
			relationType = ToOne<Author>
			relationTargetType = Author
			dbName = nil
		}
]
		toManyRelations = []
		lastPropertyId = Optional(IdUid(3:20736))
		isEntitySubclass = true
		isValueType = false
		hasStringProperties = true
		idProperty = Optional(SchemaProperty {
			modelId = Optional(IdUid(1:17664))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Book>
			entityName = Book
			unwrappedPropertyType = EntityId<Book>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
)
		idCandidates = [SchemaProperty {
			modelId = Optional(IdUid(1:17664))
			propertyName = id
			propertyType = long
			propertyFlags = [SourceryLib.PropertyFlags.id]
			propertySwiftType = EntityId<Book>
			entityName = Book
			unwrappedPropertyType = EntityId<Book>
			dbName = nil
			modelIndexId = nil
			backlinkName = nil
			backlinkType = nil
			isObjectId = true
			isBuiltInType = true
			isStringType = false
			isRelation = false
		}
]
	}
]
lastEntityId = IdUid(2:21504)
	lastRelationId = IdUid(0:0)
	lastIndexId = IdUid(1:19712)
}
